
exteeprom_read_check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000246  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e41  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000810  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066b  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000802  00000000  00000000  00002759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002f5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Intial>:
	{
		EEPROM_WriteByte(eeprom_address,*source_address);
		source_address++;
		eeprom_address++;
	}while(*(source_address-1) !=0);
}
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ba:	08 95       	ret

000000bc <UART_Transmit>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	08 95       	ret

000000cc <UART_TxString>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <UART_TxString+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <UART_TxString+0xe>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <I2C_Start>:
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	28 9a       	sbi	0x05, 0	; 5
  f0:	89 e9       	ldi	r24, 0x99	; 153
  f2:	93 e0       	ldi	r25, 0x03	; 3
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <I2C_Start+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <I2C_Start+0x10>
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <I2C_Stop>:
 102:	15 b8       	out	0x05, r1	; 5
 104:	00 c0       	rjmp	.+0      	; 0x106 <I2C_Stop+0x4>
 106:	00 c0       	rjmp	.+0      	; 0x108 <I2C_Stop+0x6>
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	00 c0       	rjmp	.+0      	; 0x10c <I2C_Stop+0xa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <I2C_Stop+0xc>
 10e:	29 9a       	sbi	0x05, 1	; 5
 110:	08 95       	ret

00000112 <I2C_NoAck>:
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 b9       	out	0x04, r24	; 4
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	85 b9       	out	0x05, r24	; 5
 11a:	28 9a       	sbi	0x05, 0	; 5
 11c:	08 95       	ret

0000011e <I2C_Write>:
 11e:	28 e0       	ldi	r18, 0x08	; 8
 120:	32 e0       	ldi	r19, 0x02	; 2
 122:	88 23       	and	r24, r24
 124:	14 f4       	brge	.+4      	; 0x12a <I2C_Write+0xc>
 126:	35 b9       	out	0x05, r19	; 5
 128:	01 c0       	rjmp	.+2      	; 0x12c <I2C_Write+0xe>
 12a:	15 b8       	out	0x05, r1	; 5
 12c:	e9 e9       	ldi	r30, 0x99	; 153
 12e:	f3 e0       	ldi	r31, 0x03	; 3
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <I2C_Write+0x12>
 134:	00 c0       	rjmp	.+0      	; 0x136 <I2C_Write+0x18>
 136:	28 9a       	sbi	0x05, 0	; 5
 138:	e9 e9       	ldi	r30, 0x99	; 153
 13a:	f3 e0       	ldi	r31, 0x03	; 3
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <I2C_Write+0x1e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <I2C_Write+0x24>
 142:	88 0f       	add	r24, r24
 144:	95 b1       	in	r25, 0x05	; 5
 146:	92 70       	andi	r25, 0x02	; 2
 148:	95 b9       	out	0x05, r25	; 5
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	51 f7       	brne	.-44     	; 0x122 <I2C_Write+0x4>
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	82 70       	andi	r24, 0x02	; 2
 152:	85 b9       	out	0x05, r24	; 5
 154:	89 e9       	ldi	r24, 0x99	; 153
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <I2C_Write+0x3a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <I2C_Write+0x40>
 15e:	15 b8       	out	0x05, r1	; 5
 160:	28 9a       	sbi	0x05, 0	; 5
 162:	08 95       	ret

00000164 <I2C_Read>:
 164:	cf 93       	push	r28
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	84 b9       	out	0x04, r24	; 4
 16a:	98 e0       	ldi	r25, 0x08	; 8
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	22 e0       	ldi	r18, 0x02	; 2
 170:	25 b9       	out	0x05, r18	; 5
 172:	00 c0       	rjmp	.+0      	; 0x174 <I2C_Read+0x10>
 174:	00 c0       	rjmp	.+0      	; 0x176 <I2C_Read+0x12>
 176:	28 9a       	sbi	0x05, 0	; 5
 178:	00 c0       	rjmp	.+0      	; 0x17a <I2C_Read+0x16>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <I2C_Read+0x18>
 17c:	83 b1       	in	r24, 0x03	; 3
 17e:	82 70       	andi	r24, 0x02	; 2
 180:	cc 0f       	add	r28, r28
 182:	c8 2b       	or	r28, r24
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <I2C_Read+0x22>
 18a:	00 00       	nop
 18c:	25 b9       	out	0x05, r18	; 5
 18e:	91 50       	subi	r25, 0x01	; 1
 190:	79 f7       	brne	.-34     	; 0x170 <I2C_Read+0xc>
 192:	0e 94 89 00 	call	0x112	; 0x112 <I2C_NoAck>
 196:	8c 2f       	mov	r24, r28
 198:	86 95       	lsr	r24
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <EEPROM_ReadByte>:
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
 1a2:	0e 94 75 00 	call	0xea	; 0xea <I2C_Start>
 1a6:	80 ea       	ldi	r24, 0xA0	; 160
 1a8:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_Write>
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_Write>
 1b2:	0e 94 75 00 	call	0xea	; 0xea <I2C_Start>
 1b6:	81 ea       	ldi	r24, 0xA1	; 161
 1b8:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_Write>
 1bc:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Read>
 1c0:	c8 2f       	mov	r28, r24
 1c2:	0e 94 81 00 	call	0x102	; 0x102 <I2C_Stop>
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <EEPROM_ReadByte+0x2a>
 1cc:	00 00       	nop
 1ce:	8c 2f       	mov	r24, r28
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <EEPROM_ReadString>:


void EEPROM_ReadString(unsigned char eeprom_address, unsigned char * destination_address)
{
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
 1dc:	8b 01       	movw	r16, r22
	char eeprom_data;

	do
	{
		eeprom_data = EEPROM_ReadByte(eeprom_address);
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 cf 00 	call	0x19e	; 0x19e <EEPROM_ReadByte>
		*destination_address = eeprom_data;
 1e4:	f8 01       	movw	r30, r16
 1e6:	81 93       	st	Z+, r24
 1e8:	8f 01       	movw	r16, r30
		destination_address++;
		eeprom_address++;
 1ea:	cf 5f       	subi	r28, 0xFF	; 255
	}while(eeprom_data!=0);
 1ec:	81 11       	cpse	r24, r1
 1ee:	f7 cf       	rjmp	.-18     	; 0x1de <EEPROM_ReadString+0xa>
}
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <main>:

int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	c4 56       	subi	r28, 0x64	; 100
 202:	d1 09       	sbc	r29, r1
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	8a b9       	out	0x0a, r24	; 10
	DDRB=0xff;
 212:	84 b9       	out	0x04, r24	; 4
	//PORTD=0x00;
unsigned char eeprom_address = 0x00, write_str[] = "SIDDHARTH PAL    SIDASTRO    SATYAM";
unsigned char read_str[100];
	//unsigned char rdchar=0;
 
  UART_Intial(ubrrv);
 214:	87 e1       	ldi	r24, 0x17	; 23
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Intial>
  UART_TxString("sidd  ");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TxString>
      //UART_Transmit(EEPROM_ReadByte(0x00));
//  	    UART_TxString("WRITE_start");
//  	  EEPROM_WriteString(eeprom_address,write_str);
//  	   	UART_TxString( write_str );
// 			UART_TxString("________________________");
		   UART_TxString("read_start");
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TxString>
		   
		   EEPROM_ReadString(0x01,read_str);
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <EEPROM_ReadString>
 	UART_TxString(read_str);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TxString>
 240:	ff cf       	rjmp	.-2      	; 0x240 <main+0x48>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
