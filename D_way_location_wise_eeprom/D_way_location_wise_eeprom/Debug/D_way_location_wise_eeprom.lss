
D_way_location_wise_eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001e0  008001e0  00000f84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001444  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000804  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000036a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb4  00000000  00000000  00003e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ee       	ldi	r26, 0xE0	; 224
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3e       	cpi	r26, 0xE8	; 232
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  9e:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:

	 for(eeprom_address=0;eeprom_address<255;eeprom_address++)
	 {
		 EEPROM_WriteByte(eeprom_address,0xff); // Write Each memory location with OxFF
	 }
 }
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <UART_Intial>:
  ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  de:	08 95       	ret

000000e0 <UART_Transmit>:
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	95 ff       	sbrs	r25, 5
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <UART_Transmit+0x4>
  ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ee:	08 95       	ret

000000f0 <UART_recieve>:
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <UART_recieve+0x4>
  fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fe:	08 95       	ret

00000100 <UART_RxString>:
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	8c 01       	movw	r16, r24
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_recieve>
 110:	c8 2f       	mov	r28, r24
 112:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_Transmit>
 116:	cd 30       	cpi	r28, 0x0D	; 13
 118:	71 f0       	breq	.+28     	; 0x136 <UART_RxString+0x36>
 11a:	ca 30       	cpi	r28, 0x0A	; 10
 11c:	61 f0       	breq	.+24     	; 0x136 <UART_RxString+0x36>
 11e:	c8 30       	cpi	r28, 0x08	; 8
 120:	21 f4       	brne	.+8      	; 0x12a <UART_RxString+0x2a>
 122:	dd 23       	and	r29, r29
 124:	11 f0       	breq	.+4      	; 0x12a <UART_RxString+0x2a>
 126:	d1 50       	subi	r29, 0x01	; 1
 128:	f1 cf       	rjmp	.-30     	; 0x10c <UART_RxString+0xc>
 12a:	f8 01       	movw	r30, r16
 12c:	ed 0f       	add	r30, r29
 12e:	f1 1d       	adc	r31, r1
 130:	c0 83       	st	Z, r28
 132:	df 5f       	subi	r29, 0xFF	; 255
 134:	eb cf       	rjmp	.-42     	; 0x10c <UART_RxString+0xc>
 136:	f8 01       	movw	r30, r16
 138:	ed 0f       	add	r30, r29
 13a:	f1 1d       	adc	r31, r1
 13c:	10 82       	st	Z, r1
 13e:	8d 2f       	mov	r24, r29
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <UART_TxString>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	31 f0       	breq	.+12     	; 0x162 <UART_TxString+0x18>
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_Transmit>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <UART_TxString+0xe>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <I2C_Start>:
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	28 9a       	sbi	0x05, 0	; 5
 16e:	89 e9       	ldi	r24, 0x99	; 153
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <I2C_Start+0xa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <I2C_Start+0x10>
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	08 95       	ret

00000180 <I2C_Stop>:
 180:	15 b8       	out	0x05, r1	; 5
 182:	00 c0       	rjmp	.+0      	; 0x184 <I2C_Stop+0x4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <I2C_Stop+0x6>
 186:	28 9a       	sbi	0x05, 0	; 5
 188:	00 c0       	rjmp	.+0      	; 0x18a <I2C_Stop+0xa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <I2C_Stop+0xc>
 18c:	29 9a       	sbi	0x05, 1	; 5
 18e:	08 95       	ret

00000190 <I2C_NoAck>:
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	84 b9       	out	0x04, r24	; 4
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	85 b9       	out	0x05, r24	; 5
 198:	28 9a       	sbi	0x05, 0	; 5
 19a:	08 95       	ret

0000019c <I2C_Write>:
 19c:	28 e0       	ldi	r18, 0x08	; 8
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	88 23       	and	r24, r24
 1a2:	14 f4       	brge	.+4      	; 0x1a8 <I2C_Write+0xc>
 1a4:	35 b9       	out	0x05, r19	; 5
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <I2C_Write+0xe>
 1a8:	15 b8       	out	0x05, r1	; 5
 1aa:	e9 e9       	ldi	r30, 0x99	; 153
 1ac:	f3 e0       	ldi	r31, 0x03	; 3
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <I2C_Write+0x12>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <I2C_Write+0x18>
 1b4:	28 9a       	sbi	0x05, 0	; 5
 1b6:	e9 e9       	ldi	r30, 0x99	; 153
 1b8:	f3 e0       	ldi	r31, 0x03	; 3
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <I2C_Write+0x1e>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <I2C_Write+0x24>
 1c0:	88 0f       	add	r24, r24
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	92 70       	andi	r25, 0x02	; 2
 1c6:	95 b9       	out	0x05, r25	; 5
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	51 f7       	brne	.-44     	; 0x1a0 <I2C_Write+0x4>
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	82 70       	andi	r24, 0x02	; 2
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	89 e9       	ldi	r24, 0x99	; 153
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <I2C_Write+0x3a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <I2C_Write+0x40>
 1dc:	15 b8       	out	0x05, r1	; 5
 1de:	28 9a       	sbi	0x05, 0	; 5
 1e0:	08 95       	ret

000001e2 <I2C_Read>:
 1e2:	cf 93       	push	r28
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	84 b9       	out	0x04, r24	; 4
 1e8:	98 e0       	ldi	r25, 0x08	; 8
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	22 e0       	ldi	r18, 0x02	; 2
 1ee:	25 b9       	out	0x05, r18	; 5
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <I2C_Read+0x10>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <I2C_Read+0x12>
 1f4:	28 9a       	sbi	0x05, 0	; 5
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <I2C_Read+0x16>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <I2C_Read+0x18>
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	82 70       	andi	r24, 0x02	; 2
 1fe:	cc 0f       	add	r28, r28
 200:	c8 2b       	or	r28, r24
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <I2C_Read+0x22>
 208:	00 00       	nop
 20a:	25 b9       	out	0x05, r18	; 5
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	79 f7       	brne	.-34     	; 0x1ee <I2C_Read+0xc>
 210:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_NoAck>
 214:	8c 2f       	mov	r24, r28
 216:	86 95       	lsr	r24
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <EEPROM_WriteByte>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	d8 2f       	mov	r29, r24
 222:	c6 2f       	mov	r28, r22
 224:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Start>
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>
 22e:	8d 2f       	mov	r24, r29
 230:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>
 23a:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_Stop>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	91 e1       	ldi	r25, 0x11	; 17
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <EEPROM_WriteByte+0x26>
 246:	00 c0       	rjmp	.+0      	; 0x248 <EEPROM_WriteByte+0x2c>
 248:	00 00       	nop
 24a:	8c 2f       	mov	r24, r28
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <EEPROM_ReadByte>:
 
unsigned char EEPROM_ReadByte(unsigned char eeprom_Address)
{
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
	unsigned char eeprom_Data;

	I2C_Start();   
 256:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Start>
	//_delay_ms(100);          
 	I2C_Write(EEPROM_ID);
 25a:	80 ea       	ldi	r24, 0xA0	; 160
 25c:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>
// 	//I2C_Ack();
	//_delay_ms(100);

 	I2C_Write(eeprom_Address); 
 260:	8c 2f       	mov	r24, r28
 262:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>

 	I2C_Start();	
 266:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Start>
	       
 	I2C_Write(0xA1);
 26a:	81 ea       	ldi	r24, 0xA1	; 161
 26c:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Write>
	
	eeprom_Data = I2C_Read();  // Read the data from specified address
 270:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Read>
 274:	c8 2f       	mov	r28, r24

	I2C_Stop();		         
 276:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <EEPROM_ReadByte+0x2a>
 280:	00 00       	nop
	_delay_us(10);
	return eeprom_Data;        

}
 282:	8c 2f       	mov	r24, r28
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <EEPROM_WriteString>:

void EEPROM_WriteString(unsigned char eeprom_address, unsigned char * source_address)
{
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	18 2f       	mov	r17, r24
 294:	eb 01       	movw	r28, r22
 296:	7e 01       	movw	r14, r28
	do
	{
		EEPROM_WriteByte(eeprom_address,*source_address);
 298:	69 91       	ld	r22, Y+
 29a:	81 2f       	mov	r24, r17
 29c:	0e 94 0e 01 	call	0x21c	; 0x21c <EEPROM_WriteByte>
		source_address++;
		eeprom_address++;
 2a0:	1f 5f       	subi	r17, 0xFF	; 255
	}while(*(source_address-1) !=0);
 2a2:	f7 01       	movw	r30, r14
 2a4:	80 81       	ld	r24, Z
 2a6:	81 11       	cpse	r24, r1
 2a8:	f6 cf       	rjmp	.-20     	; 0x296 <EEPROM_WriteString+0xe>
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	08 95       	ret

000002b6 <EEPROM_ReadString>:


void EEPROM_ReadString(unsigned char eeprom_address, unsigned char * destination_address)
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
 2be:	8b 01       	movw	r16, r22
	char eeprom_data;

	do
	{
		eeprom_data = EEPROM_ReadByte(eeprom_address);
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 29 01 	call	0x252	; 0x252 <EEPROM_ReadByte>
		*destination_address = eeprom_data;
 2c6:	f8 01       	movw	r30, r16
 2c8:	81 93       	st	Z+, r24
 2ca:	8f 01       	movw	r16, r30
		destination_address++;
		eeprom_address++;
 2cc:	cf 5f       	subi	r28, 0xFF	; 255
	}while(eeprom_data!=0);
 2ce:	81 11       	cpse	r24, r1
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <EEPROM_ReadString+0xa>
}
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <getSubString>:
	UDR0 = c;
	return 0;
}
/*Function definition*/
int  getSubString(char *source, char *target, int from, int to)
{
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
	int length=0;
	int i=0,j=0;
	
	//get length
	while(source[i++]!='\0')
 2e4:	88 81       	ld	r24, Y
 2e6:	88 23       	and	r24, r24
 2e8:	49 f0       	breq	.+18     	; 0x2fc <getSubString+0x22>
 2ea:	de 01       	movw	r26, r28
 2ec:	11 96       	adiw	r26, 0x01	; 1
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
	length++;
 2f2:	31 96       	adiw	r30, 0x01	; 1
{
	int length=0;
	int i=0,j=0;
	
	//get length
	while(source[i++]!='\0')
 2f4:	9d 91       	ld	r25, X+
 2f6:	91 11       	cpse	r25, r1
 2f8:	fc cf       	rjmp	.-8      	; 0x2f2 <getSubString+0x18>
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <getSubString+0x26>
	return 0;
}
/*Function definition*/
int  getSubString(char *source, char *target, int from, int to)
{
	int length=0;
 2fc:	e0 e0       	ldi	r30, 0x00	; 0
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
	
	//get length
	while(source[i++]!='\0')
	length++;
	
	if(from<=0 || from>length){
 300:	14 16       	cp	r1, r20
 302:	15 06       	cpc	r1, r21
 304:	1c f4       	brge	.+6      	; 0x30c <getSubString+0x32>
 306:	e4 17       	cp	r30, r20
 308:	f5 07       	cpc	r31, r21
 30a:	3c f4       	brge	.+14     	; 0x31a <getSubString+0x40>
		printf("Invalid \'from\' index\n");
 30c:	8e e0       	ldi	r24, 0x0E	; 14
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 bf 03 	call	0x77e	; 0x77e <puts>
		return 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	25 c0       	rjmp	.+74     	; 0x364 <getSubString+0x8a>
	}
	if(to>length){
 31a:	e2 17       	cp	r30, r18
 31c:	f3 07       	cpc	r31, r19
 31e:	34 f0       	brlt	.+12     	; 0x32c <getSubString+0x52>
		printf("Invalid \'to\' index\n");
		return 1;
	}
	
	for(i=from,j=0;i<=to;i++,j++){
 320:	24 17       	cp	r18, r20
 322:	35 07       	cpc	r19, r21
 324:	54 f4       	brge	.+20     	; 0x33a <getSubString+0x60>
 326:	e0 e0       	ldi	r30, 0x00	; 0
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	17 c0       	rjmp	.+46     	; 0x35a <getSubString+0x80>
	if(from<=0 || from>length){
		printf("Invalid \'from\' index\n");
		return 1;
	}
	if(to>length){
		printf("Invalid \'to\' index\n");
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 bf 03 	call	0x77e	; 0x77e <puts>
		return 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	15 c0       	rjmp	.+42     	; 0x364 <getSubString+0x8a>
 33a:	8a 01       	movw	r16, r20
 33c:	de 01       	movw	r26, r28
 33e:	a4 0f       	add	r26, r20
 340:	b5 1f       	adc	r27, r21
 342:	eb 01       	movw	r28, r22
	}
	
	for(i=from,j=0;i<=to;i++,j++){
 344:	e0 e0       	ldi	r30, 0x00	; 0
 346:	f0 e0       	ldi	r31, 0x00	; 0
		target[j]=source[i];
 348:	8d 91       	ld	r24, X+
 34a:	89 93       	st	Y+, r24
	if(to>length){
		printf("Invalid \'to\' index\n");
		return 1;
	}
	
	for(i=from,j=0;i<=to;i++,j++){
 34c:	31 96       	adiw	r30, 0x01	; 1
 34e:	cf 01       	movw	r24, r30
 350:	80 0f       	add	r24, r16
 352:	91 1f       	adc	r25, r17
 354:	28 17       	cp	r18, r24
 356:	39 07       	cpc	r19, r25
 358:	bc f7       	brge	.-18     	; 0x348 <getSubString+0x6e>
		target[j]=source[i];
	}
	
	//assign NULL at the end of string
	target[j]='\0';
 35a:	e6 0f       	add	r30, r22
 35c:	f7 1f       	adc	r31, r23
 35e:	10 82       	st	Z, r1
	
	return 0;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <main>:

int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	c6 5e       	subi	r28, 0xE6	; 230
 378:	d4 41       	sbci	r29, 0x14	; 20
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	84 b9       	out	0x04, r24	; 4
	UART_Intial(ubrrv);
 388:	87 e1       	ldi	r24, 0x17	; 23
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 65 00 	call	0xca	; 0xca <UART_Intial>
	stdout = &mystdout;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x3>
 398:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end+0x2>
 39c:	4e 01       	movw	r8, r28
 39e:	8f e9       	ldi	r24, 0x9F	; 159
 3a0:	88 1a       	sub	r8, r24
 3a2:	83 e3       	ldi	r24, 0x33	; 51
 3a4:	98 0a       	sbc	r9, r24
				{s=UART_RxString(last);
					UART_TxString(s);
				} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
				if (!ENTER_PRESS)//true when enter released
					 l = (int)strtol(last, NULL, 0);
   printf("%d",l);
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f0 e7       	ldi	r31, 0x70	; 112
 3aa:	af 2e       	mov	r10, r31
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	bf 2e       	mov	r11, r31
 3b0:	f0 2d       	mov	r31, r0
    UART_TxString("\n\r");
				getSubString(text,text1,5,l);
				UART_TxString("\n\r write address\n\r");
				E[i].m_address_w = (int)strtol(text, NULL, 16);
				printf("%d\n",E[i].m_address_w);
 3b2:	0f 2e       	mov	r0, r31
 3b4:	f1 eb       	ldi	r31, 0xB1	; 177
 3b6:	cf 2e       	mov	r12, r31
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	df 2e       	mov	r13, r31
 3bc:	f0 2d       	mov	r31, r0

			} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
			if (!ENTER_PRESS)
			{
				E[i].m_address_r = (int)strtol(E[i].str_a_r, NULL, 16);
				printf("\n%d\n",E[i].m_address_r);
 3be:	0f 2e       	mov	r0, r31
 3c0:	f0 eb       	ldi	r31, 0xB0	; 176
 3c2:	6f 2e       	mov	r6, r31
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	7f 2e       	mov	r7, r31
 3c8:	f0 2d       	mov	r31, r0
 3ca:	8e 01       	movw	r16, r28
 3cc:	03 5d       	subi	r16, 0xD3	; 211
 3ce:	1e 4f       	sbci	r17, 0xFE	; 254
// 					len=UART_RxString(E[i].str_a_w);
// 					UART_TxString(len);
// 				} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
// 				if (!ENTER_PRESS)//true when enter released
			////////////////////////////////////////////////
			UART_TxString("\n\r write..\n\r");
 3d0:	86 e3       	ldi	r24, 0x36	; 54
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
			UART_TxString("W_memory address+data\n\r");
 3d8:	83 e4       	ldi	r24, 0x43	; 67
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
// UART_TxString("\n\r");
// printf("String is: %s\n",text);
// getSubString(text,text1,5,14)
/////////
			do
			{len=UART_RxString(text);
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxString>
				UART_TxString(len);
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
			} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
			if (!ENTER_PRESS)//true when enter released
			{
				UART_TxString("\n\renter last index\n\r");
 3ee:	8b e5       	ldi	r24, 0x5B	; 91
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				unsigned int last[50];
				do
				{s=UART_RxString(last);
 3f6:	ce 01       	movw	r24, r28
 3f8:	8d 57       	subi	r24, 0x7D	; 125
 3fa:	9b 4e       	sbci	r25, 0xEB	; 235
 3fc:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxString>
					UART_TxString(s);
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
				if (!ENTER_PRESS)//true when enter released
					 l = (int)strtol(last, NULL, 0);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	ce 01       	movw	r24, r28
 410:	8d 57       	subi	r24, 0x7D	; 125
 412:	9b 4e       	sbci	r25, 0xEB	; 235
 414:	0e 94 8a 02 	call	0x514	; 0x514 <strtol>
 418:	e6 2e       	mov	r14, r22
 41a:	f7 2e       	mov	r15, r23
   printf("%d",l);
 41c:	7f 93       	push	r23
 41e:	6f 93       	push	r22
 420:	bf 92       	push	r11
 422:	af 92       	push	r10
 424:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
    UART_TxString("\n\r");
 428:	80 e4       	ldi	r24, 0x40	; 64
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				getSubString(text,text1,5,l);
 430:	2e 2d       	mov	r18, r14
 432:	3f 2d       	mov	r19, r15
 434:	45 e0       	ldi	r20, 0x05	; 5
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	be 01       	movw	r22, r28
 43a:	6b 59       	subi	r22, 0x9B	; 155
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	0e 94 6d 01 	call	0x2da	; 0x2da <getSubString>
				UART_TxString("\n\r write address\n\r");
 446:	83 e7       	ldi	r24, 0x73	; 115
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				E[i].m_address_w = (int)strtol(text, NULL, 16);
 44e:	40 e1       	ldi	r20, 0x10	; 16
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	0e 94 8a 02 	call	0x514	; 0x514 <strtol>
 45e:	f8 01       	movw	r30, r16
 460:	62 ab       	std	Z+50, r22	; 0x32
 462:	73 ab       	std	Z+51, r23	; 0x33
				printf("%d\n",E[i].m_address_w);
 464:	7f 93       	push	r23
 466:	6f 93       	push	r22
 468:	df 92       	push	r13
 46a:	cf 92       	push	r12
 46c:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
			}
			//_______________________________________________________________
			UART_TxString("wrt data\n\r");
 470:	86 e8       	ldi	r24, 0x86	; 134
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
// 				UART_TxString(str);
// 				
// 			} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
// 			if (!ENTER_PRESS)
// 			{
				EEPROM_WriteString(E[i].m_address_w,text1);
 478:	be 01       	movw	r22, r28
 47a:	6b 59       	subi	r22, 0x9B	; 155
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	f8 01       	movw	r30, r16
 480:	82 a9       	ldd	r24, Z+50	; 0x32
 482:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_WriteString>
				UART_TxString(text1);
 486:	ce 01       	movw	r24, r28
 488:	8b 59       	subi	r24, 0x9B	; 155
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
			//}
			
			/////////////////////////////////////////////////////
			UART_TxString("\n\r read..");
 490:	81 e9       	ldi	r24, 0x91	; 145
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
			UART_TxString("\n\rR_memory_address\n\r");
 498:	8b e9       	ldi	r24, 0x9B	; 155
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
 4a0:	78 01       	movw	r14, r16
 4a2:	f4 e6       	ldi	r31, 0x64	; 100
 4a4:	ef 1a       	sub	r14, r31
 4a6:	f1 08       	sbc	r15, r1
			do
			{len2=UART_RxString(E[i].str_a_r);
 4a8:	c7 01       	movw	r24, r14
 4aa:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxString>
				UART_TxString(len2);
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>

			} while (ENTER_PRESS);//loop break after condition false i.e enter release after pressed // EXIT
			if (!ENTER_PRESS)
			{
				E[i].m_address_r = (int)strtol(E[i].str_a_r, NULL, 16);
 4b4:	40 e1       	ldi	r20, 0x10	; 16
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	c7 01       	movw	r24, r14
 4be:	0e 94 8a 02 	call	0x514	; 0x514 <strtol>
 4c2:	f8 01       	movw	r30, r16
 4c4:	64 ab       	std	Z+52, r22	; 0x34
 4c6:	75 ab       	std	Z+53, r23	; 0x35
				printf("\n%d\n",E[i].m_address_r);
 4c8:	7f 93       	push	r23
 4ca:	6f 93       	push	r22
 4cc:	7f 92       	push	r7
 4ce:	6f 92       	push	r6
 4d0:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
				UART_TxString("\n\r read_data\n\r");
 4d4:	85 eb       	ldi	r24, 0xB5	; 181
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				EEPROM_ReadString(E[i].m_address_r,E[i].des);
 4dc:	b8 01       	movw	r22, r16
 4de:	f8 01       	movw	r30, r16
 4e0:	84 a9       	ldd	r24, Z+52	; 0x34
 4e2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <EEPROM_ReadString>
				UART_TxString(E[i].des);
 4e6:	c8 01       	movw	r24, r16
 4e8:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
				UART_TxString("\n\r");
 4ec:	80 e4       	ldi	r24, 0x40	; 64
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
			}
			UART_TxString("\n\rdo u want write again...");
 4f4:	84 ec       	ldi	r24, 0xC4	; 196
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_TxString>
 4fc:	04 53       	subi	r16, 0x34	; 52
 4fe:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	struct exteeprom E[25];
	// EEPROM_Erase();
	while (1)
	{
		for (int i=0;i<255;i++)
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	08 15       	cp	r16, r8
 50c:	19 05       	cpc	r17, r9
 50e:	09 f0       	breq	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	5f cf       	rjmp	.-322    	; 0x3d0 <main+0x62>
 512:	5b cf       	rjmp	.-330    	; 0x3ca <main+0x5c>

00000514 <strtol>:
 514:	a0 e0       	ldi	r26, 0x00	; 0
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e0 e9       	ldi	r30, 0x90	; 144
 51a:	f2 e0       	ldi	r31, 0x02	; 2
 51c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__prologue_saves__+0x2>
 520:	5c 01       	movw	r10, r24
 522:	6b 01       	movw	r12, r22
 524:	7a 01       	movw	r14, r20
 526:	61 15       	cp	r22, r1
 528:	71 05       	cpc	r23, r1
 52a:	19 f0       	breq	.+6      	; 0x532 <strtol+0x1e>
 52c:	fb 01       	movw	r30, r22
 52e:	91 83       	std	Z+1, r25	; 0x01
 530:	80 83       	st	Z, r24
 532:	e1 14       	cp	r14, r1
 534:	f1 04       	cpc	r15, r1
 536:	29 f0       	breq	.+10     	; 0x542 <strtol+0x2e>
 538:	c7 01       	movw	r24, r14
 53a:	02 97       	sbiw	r24, 0x02	; 2
 53c:	83 97       	sbiw	r24, 0x23	; 35
 53e:	08 f0       	brcs	.+2      	; 0x542 <strtol+0x2e>
 540:	e5 c0       	rjmp	.+458    	; 0x70c <strtol+0x1f8>
 542:	e5 01       	movw	r28, r10
 544:	21 96       	adiw	r28, 0x01	; 1
 546:	f5 01       	movw	r30, r10
 548:	10 81       	ld	r17, Z
 54a:	81 2f       	mov	r24, r17
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 a0 03 	call	0x740	; 0x740 <isspace>
 552:	89 2b       	or	r24, r25
 554:	11 f0       	breq	.+4      	; 0x55a <strtol+0x46>
 556:	5e 01       	movw	r10, r28
 558:	f4 cf       	rjmp	.-24     	; 0x542 <strtol+0x2e>
 55a:	1d 32       	cpi	r17, 0x2D	; 45
 55c:	29 f4       	brne	.+10     	; 0x568 <strtol+0x54>
 55e:	21 96       	adiw	r28, 0x01	; 1
 560:	f5 01       	movw	r30, r10
 562:	11 81       	ldd	r17, Z+1	; 0x01
 564:	01 e0       	ldi	r16, 0x01	; 1
 566:	07 c0       	rjmp	.+14     	; 0x576 <strtol+0x62>
 568:	1b 32       	cpi	r17, 0x2B	; 43
 56a:	21 f4       	brne	.+8      	; 0x574 <strtol+0x60>
 56c:	e5 01       	movw	r28, r10
 56e:	22 96       	adiw	r28, 0x02	; 2
 570:	f5 01       	movw	r30, r10
 572:	11 81       	ldd	r17, Z+1	; 0x01
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	e1 14       	cp	r14, r1
 578:	f1 04       	cpc	r15, r1
 57a:	09 f1       	breq	.+66     	; 0x5be <strtol+0xaa>
 57c:	f0 e1       	ldi	r31, 0x10	; 16
 57e:	ef 16       	cp	r14, r31
 580:	f1 04       	cpc	r15, r1
 582:	29 f4       	brne	.+10     	; 0x58e <strtol+0x7a>
 584:	3f c0       	rjmp	.+126    	; 0x604 <strtol+0xf0>
 586:	10 e3       	ldi	r17, 0x30	; 48
 588:	e1 14       	cp	r14, r1
 58a:	f1 04       	cpc	r15, r1
 58c:	21 f1       	breq	.+72     	; 0x5d6 <strtol+0xc2>
 58e:	28 e0       	ldi	r18, 0x08	; 8
 590:	e2 16       	cp	r14, r18
 592:	f1 04       	cpc	r15, r1
 594:	01 f1       	breq	.+64     	; 0x5d6 <strtol+0xc2>
 596:	54 f4       	brge	.+20     	; 0x5ac <strtol+0x98>
 598:	e2 e0       	ldi	r30, 0x02	; 2
 59a:	ee 16       	cp	r14, r30
 59c:	f1 04       	cpc	r15, r1
 59e:	21 f5       	brne	.+72     	; 0x5e8 <strtol+0xd4>
 5a0:	81 2c       	mov	r8, r1
 5a2:	91 2c       	mov	r9, r1
 5a4:	a1 2c       	mov	r10, r1
 5a6:	b0 e4       	ldi	r27, 0x40	; 64
 5a8:	bb 2e       	mov	r11, r27
 5aa:	3e c0       	rjmp	.+124    	; 0x628 <strtol+0x114>
 5ac:	fa e0       	ldi	r31, 0x0A	; 10
 5ae:	ef 16       	cp	r14, r31
 5b0:	f1 04       	cpc	r15, r1
 5b2:	39 f0       	breq	.+14     	; 0x5c2 <strtol+0xae>
 5b4:	20 e1       	ldi	r18, 0x10	; 16
 5b6:	e2 16       	cp	r14, r18
 5b8:	f1 04       	cpc	r15, r1
 5ba:	b1 f4       	brne	.+44     	; 0x5e8 <strtol+0xd4>
 5bc:	30 c0       	rjmp	.+96     	; 0x61e <strtol+0x10a>
 5be:	10 33       	cpi	r17, 0x30	; 48
 5c0:	19 f1       	breq	.+70     	; 0x608 <strtol+0xf4>
 5c2:	fa e0       	ldi	r31, 0x0A	; 10
 5c4:	ef 2e       	mov	r14, r31
 5c6:	f1 2c       	mov	r15, r1
 5c8:	ac ec       	ldi	r26, 0xCC	; 204
 5ca:	8a 2e       	mov	r8, r26
 5cc:	98 2c       	mov	r9, r8
 5ce:	a8 2c       	mov	r10, r8
 5d0:	ac e0       	ldi	r26, 0x0C	; 12
 5d2:	ba 2e       	mov	r11, r26
 5d4:	29 c0       	rjmp	.+82     	; 0x628 <strtol+0x114>
 5d6:	78 e0       	ldi	r23, 0x08	; 8
 5d8:	e7 2e       	mov	r14, r23
 5da:	f1 2c       	mov	r15, r1
 5dc:	81 2c       	mov	r8, r1
 5de:	91 2c       	mov	r9, r1
 5e0:	a1 2c       	mov	r10, r1
 5e2:	e0 e1       	ldi	r30, 0x10	; 16
 5e4:	be 2e       	mov	r11, r30
 5e6:	20 c0       	rjmp	.+64     	; 0x628 <strtol+0x114>
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e8       	ldi	r25, 0x80	; 128
 5f0:	97 01       	movw	r18, r14
 5f2:	0f 2c       	mov	r0, r15
 5f4:	00 0c       	add	r0, r0
 5f6:	44 0b       	sbc	r20, r20
 5f8:	55 0b       	sbc	r21, r21
 5fa:	0e 94 93 06 	call	0xd26	; 0xd26 <__udivmodsi4>
 5fe:	49 01       	movw	r8, r18
 600:	5a 01       	movw	r10, r20
 602:	12 c0       	rjmp	.+36     	; 0x628 <strtol+0x114>
 604:	10 33       	cpi	r17, 0x30	; 48
 606:	59 f4       	brne	.+22     	; 0x61e <strtol+0x10a>
 608:	88 81       	ld	r24, Y
 60a:	8f 7d       	andi	r24, 0xDF	; 223
 60c:	88 35       	cpi	r24, 0x58	; 88
 60e:	09 f0       	breq	.+2      	; 0x612 <strtol+0xfe>
 610:	ba cf       	rjmp	.-140    	; 0x586 <strtol+0x72>
 612:	19 81       	ldd	r17, Y+1	; 0x01
 614:	22 96       	adiw	r28, 0x02	; 2
 616:	02 60       	ori	r16, 0x02	; 2
 618:	80 e1       	ldi	r24, 0x10	; 16
 61a:	e8 2e       	mov	r14, r24
 61c:	f1 2c       	mov	r15, r1
 61e:	81 2c       	mov	r8, r1
 620:	91 2c       	mov	r9, r1
 622:	a1 2c       	mov	r10, r1
 624:	68 e0       	ldi	r22, 0x08	; 8
 626:	b6 2e       	mov	r11, r22
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	cb 01       	movw	r24, r22
 630:	27 01       	movw	r4, r14
 632:	0f 2c       	mov	r0, r15
 634:	00 0c       	add	r0, r0
 636:	66 08       	sbc	r6, r6
 638:	77 08       	sbc	r7, r7
 63a:	fe 01       	movw	r30, r28
 63c:	50 ed       	ldi	r21, 0xD0	; 208
 63e:	35 2e       	mov	r3, r21
 640:	31 0e       	add	r3, r17
 642:	29 e0       	ldi	r18, 0x09	; 9
 644:	23 15       	cp	r18, r3
 646:	70 f4       	brcc	.+28     	; 0x664 <strtol+0x150>
 648:	2f eb       	ldi	r18, 0xBF	; 191
 64a:	21 0f       	add	r18, r17
 64c:	2a 31       	cpi	r18, 0x1A	; 26
 64e:	18 f4       	brcc	.+6      	; 0x656 <strtol+0x142>
 650:	39 ec       	ldi	r19, 0xC9	; 201
 652:	33 2e       	mov	r3, r19
 654:	06 c0       	rjmp	.+12     	; 0x662 <strtol+0x14e>
 656:	2f e9       	ldi	r18, 0x9F	; 159
 658:	21 0f       	add	r18, r17
 65a:	2a 31       	cpi	r18, 0x1A	; 26
 65c:	18 f5       	brcc	.+70     	; 0x6a4 <strtol+0x190>
 65e:	29 ea       	ldi	r18, 0xA9	; 169
 660:	32 2e       	mov	r3, r18
 662:	31 0e       	add	r3, r17
 664:	23 2d       	mov	r18, r3
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	2e 15       	cp	r18, r14
 66a:	3f 05       	cpc	r19, r15
 66c:	dc f4       	brge	.+54     	; 0x6a4 <strtol+0x190>
 66e:	47 fd       	sbrc	r20, 7
 670:	16 c0       	rjmp	.+44     	; 0x69e <strtol+0x18a>
 672:	86 16       	cp	r8, r22
 674:	97 06       	cpc	r9, r23
 676:	a8 06       	cpc	r10, r24
 678:	b9 06       	cpc	r11, r25
 67a:	70 f0       	brcs	.+28     	; 0x698 <strtol+0x184>
 67c:	a3 01       	movw	r20, r6
 67e:	92 01       	movw	r18, r4
 680:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsi3>
 684:	63 0d       	add	r22, r3
 686:	71 1d       	adc	r23, r1
 688:	81 1d       	adc	r24, r1
 68a:	91 1d       	adc	r25, r1
 68c:	61 30       	cpi	r22, 0x01	; 1
 68e:	71 05       	cpc	r23, r1
 690:	81 05       	cpc	r24, r1
 692:	20 e8       	ldi	r18, 0x80	; 128
 694:	92 07       	cpc	r25, r18
 696:	10 f0       	brcs	.+4      	; 0x69c <strtol+0x188>
 698:	4f ef       	ldi	r20, 0xFF	; 255
 69a:	01 c0       	rjmp	.+2      	; 0x69e <strtol+0x18a>
 69c:	41 e0       	ldi	r20, 0x01	; 1
 69e:	21 96       	adiw	r28, 0x01	; 1
 6a0:	10 81       	ld	r17, Z
 6a2:	cb cf       	rjmp	.-106    	; 0x63a <strtol+0x126>
 6a4:	20 2f       	mov	r18, r16
 6a6:	21 70       	andi	r18, 0x01	; 1
 6a8:	c1 14       	cp	r12, r1
 6aa:	d1 04       	cpc	r13, r1
 6ac:	71 f0       	breq	.+28     	; 0x6ca <strtol+0x1b6>
 6ae:	44 23       	and	r20, r20
 6b0:	29 f0       	breq	.+10     	; 0x6bc <strtol+0x1a8>
 6b2:	21 97       	sbiw	r28, 0x01	; 1
 6b4:	f6 01       	movw	r30, r12
 6b6:	d1 83       	std	Z+1, r29	; 0x01
 6b8:	c0 83       	st	Z, r28
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <strtol+0x1b6>
 6bc:	01 ff       	sbrs	r16, 1
 6be:	19 c0       	rjmp	.+50     	; 0x6f2 <strtol+0x1de>
 6c0:	22 97       	sbiw	r28, 0x02	; 2
 6c2:	f6 01       	movw	r30, r12
 6c4:	d1 83       	std	Z+1, r29	; 0x01
 6c6:	c0 83       	st	Z, r28
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <strtol+0x1de>
 6ca:	47 ff       	sbrs	r20, 7
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <strtol+0x1de>
 6ce:	22 23       	and	r18, r18
 6d0:	29 f0       	breq	.+10     	; 0x6dc <strtol+0x1c8>
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e8       	ldi	r25, 0x80	; 128
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <strtol+0x1d0>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	9f e7       	ldi	r25, 0x7F	; 127
 6e4:	22 e2       	ldi	r18, 0x22	; 34
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <errno+0x1>
 6ec:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <errno>
 6f0:	09 c0       	rjmp	.+18     	; 0x704 <strtol+0x1f0>
 6f2:	22 23       	and	r18, r18
 6f4:	81 f0       	breq	.+32     	; 0x716 <strtol+0x202>
 6f6:	90 95       	com	r25
 6f8:	80 95       	com	r24
 6fa:	70 95       	com	r23
 6fc:	61 95       	neg	r22
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	46 2f       	mov	r20, r22
 706:	37 2f       	mov	r19, r23
 708:	28 2f       	mov	r18, r24
 70a:	12 c0       	rjmp	.+36     	; 0x730 <strtol+0x21c>
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0d c0       	rjmp	.+26     	; 0x730 <strtol+0x21c>
 716:	97 ff       	sbrs	r25, 7
 718:	f5 cf       	rjmp	.-22     	; 0x704 <strtol+0x1f0>
 71a:	82 e2       	ldi	r24, 0x22	; 34
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <errno+0x1>
 722:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <errno>
 726:	6f ef       	ldi	r22, 0xFF	; 255
 728:	7f ef       	ldi	r23, 0xFF	; 255
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	9f e7       	ldi	r25, 0x7F	; 127
 72e:	ea cf       	rjmp	.-44     	; 0x704 <strtol+0x1f0>
 730:	64 2f       	mov	r22, r20
 732:	73 2f       	mov	r23, r19
 734:	82 2f       	mov	r24, r18
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	e1 e1       	ldi	r30, 0x11	; 17
 73c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__epilogue_restores__+0x2>

00000740 <isspace>:
 740:	91 11       	cpse	r25, r1
 742:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__ctype_isfalse>
 746:	80 32       	cpi	r24, 0x20	; 32
 748:	19 f0       	breq	.+6      	; 0x750 <isspace+0x10>
 74a:	89 50       	subi	r24, 0x09	; 9
 74c:	85 50       	subi	r24, 0x05	; 5
 74e:	c8 f7       	brcc	.-14     	; 0x742 <isspace+0x2>
 750:	08 95       	ret

00000752 <printf>:
 752:	a0 e0       	ldi	r26, 0x00	; 0
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	ef ea       	ldi	r30, 0xAF	; 175
 758:	f3 e0       	ldi	r31, 0x03	; 3
 75a:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__prologue_saves__+0x20>
 75e:	ae 01       	movw	r20, r28
 760:	4b 5f       	subi	r20, 0xFB	; 251
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	fa 01       	movw	r30, r20
 766:	61 91       	ld	r22, Z+
 768:	71 91       	ld	r23, Z+
 76a:	af 01       	movw	r20, r30
 76c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end+0x2>
 770:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x3>
 774:	0e 94 ef 03 	call	0x7de	; 0x7de <vfprintf>
 778:	e2 e0       	ldi	r30, 0x02	; 2
 77a:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__epilogue_restores__+0x20>

0000077e <puts>:
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__data_end+0x2>
 78a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__data_end+0x3>
 78e:	23 81       	ldd	r18, Z+3	; 0x03
 790:	21 ff       	sbrs	r18, 1
 792:	1b c0       	rjmp	.+54     	; 0x7ca <puts+0x4c>
 794:	8c 01       	movw	r16, r24
 796:	d0 e0       	ldi	r29, 0x00	; 0
 798:	c0 e0       	ldi	r28, 0x00	; 0
 79a:	f8 01       	movw	r30, r16
 79c:	81 91       	ld	r24, Z+
 79e:	8f 01       	movw	r16, r30
 7a0:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <__data_end+0x2>
 7a4:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <__data_end+0x3>
 7a8:	db 01       	movw	r26, r22
 7aa:	18 96       	adiw	r26, 0x08	; 8
 7ac:	ed 91       	ld	r30, X+
 7ae:	fc 91       	ld	r31, X
 7b0:	19 97       	sbiw	r26, 0x09	; 9
 7b2:	88 23       	and	r24, r24
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <puts+0x44>
 7b6:	09 95       	icall
 7b8:	89 2b       	or	r24, r25
 7ba:	79 f3       	breq	.-34     	; 0x79a <puts+0x1c>
 7bc:	df ef       	ldi	r29, 0xFF	; 255
 7be:	cf ef       	ldi	r28, 0xFF	; 255
 7c0:	ec cf       	rjmp	.-40     	; 0x79a <puts+0x1c>
 7c2:	8a e0       	ldi	r24, 0x0A	; 10
 7c4:	09 95       	icall
 7c6:	89 2b       	or	r24, r25
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <puts+0x52>
 7ca:	8f ef       	ldi	r24, 0xFF	; 255
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <puts+0x56>
 7d0:	8d 2f       	mov	r24, r29
 7d2:	9c 2f       	mov	r25, r28
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <vfprintf>:
 7de:	ab e0       	ldi	r26, 0x0B	; 11
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e5 ef       	ldi	r30, 0xF5	; 245
 7e4:	f3 e0       	ldi	r31, 0x03	; 3
 7e6:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__>
 7ea:	6c 01       	movw	r12, r24
 7ec:	7b 01       	movw	r14, r22
 7ee:	8a 01       	movw	r16, r20
 7f0:	fc 01       	movw	r30, r24
 7f2:	17 82       	std	Z+7, r1	; 0x07
 7f4:	16 82       	std	Z+6, r1	; 0x06
 7f6:	83 81       	ldd	r24, Z+3	; 0x03
 7f8:	81 ff       	sbrs	r24, 1
 7fa:	cc c1       	rjmp	.+920    	; 0xb94 <__stack+0x295>
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	3c 01       	movw	r6, r24
 802:	f6 01       	movw	r30, r12
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	f7 01       	movw	r30, r14
 808:	93 fd       	sbrc	r25, 3
 80a:	85 91       	lpm	r24, Z+
 80c:	93 ff       	sbrs	r25, 3
 80e:	81 91       	ld	r24, Z+
 810:	7f 01       	movw	r14, r30
 812:	88 23       	and	r24, r24
 814:	09 f4       	brne	.+2      	; 0x818 <vfprintf+0x3a>
 816:	ba c1       	rjmp	.+884    	; 0xb8c <__stack+0x28d>
 818:	85 32       	cpi	r24, 0x25	; 37
 81a:	39 f4       	brne	.+14     	; 0x82a <vfprintf+0x4c>
 81c:	93 fd       	sbrc	r25, 3
 81e:	85 91       	lpm	r24, Z+
 820:	93 ff       	sbrs	r25, 3
 822:	81 91       	ld	r24, Z+
 824:	7f 01       	movw	r14, r30
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	29 f4       	brne	.+10     	; 0x834 <vfprintf+0x56>
 82a:	b6 01       	movw	r22, r12
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 832:	e7 cf       	rjmp	.-50     	; 0x802 <vfprintf+0x24>
 834:	91 2c       	mov	r9, r1
 836:	21 2c       	mov	r2, r1
 838:	31 2c       	mov	r3, r1
 83a:	ff e1       	ldi	r31, 0x1F	; 31
 83c:	f3 15       	cp	r31, r3
 83e:	d8 f0       	brcs	.+54     	; 0x876 <vfprintf+0x98>
 840:	8b 32       	cpi	r24, 0x2B	; 43
 842:	79 f0       	breq	.+30     	; 0x862 <vfprintf+0x84>
 844:	38 f4       	brcc	.+14     	; 0x854 <vfprintf+0x76>
 846:	80 32       	cpi	r24, 0x20	; 32
 848:	79 f0       	breq	.+30     	; 0x868 <vfprintf+0x8a>
 84a:	83 32       	cpi	r24, 0x23	; 35
 84c:	a1 f4       	brne	.+40     	; 0x876 <vfprintf+0x98>
 84e:	23 2d       	mov	r18, r3
 850:	20 61       	ori	r18, 0x10	; 16
 852:	1d c0       	rjmp	.+58     	; 0x88e <vfprintf+0xb0>
 854:	8d 32       	cpi	r24, 0x2D	; 45
 856:	61 f0       	breq	.+24     	; 0x870 <vfprintf+0x92>
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	69 f4       	brne	.+26     	; 0x876 <vfprintf+0x98>
 85c:	23 2d       	mov	r18, r3
 85e:	21 60       	ori	r18, 0x01	; 1
 860:	16 c0       	rjmp	.+44     	; 0x88e <vfprintf+0xb0>
 862:	83 2d       	mov	r24, r3
 864:	82 60       	ori	r24, 0x02	; 2
 866:	38 2e       	mov	r3, r24
 868:	e3 2d       	mov	r30, r3
 86a:	e4 60       	ori	r30, 0x04	; 4
 86c:	3e 2e       	mov	r3, r30
 86e:	2a c0       	rjmp	.+84     	; 0x8c4 <vfprintf+0xe6>
 870:	f3 2d       	mov	r31, r3
 872:	f8 60       	ori	r31, 0x08	; 8
 874:	1d c0       	rjmp	.+58     	; 0x8b0 <vfprintf+0xd2>
 876:	37 fc       	sbrc	r3, 7
 878:	2d c0       	rjmp	.+90     	; 0x8d4 <vfprintf+0xf6>
 87a:	20 ed       	ldi	r18, 0xD0	; 208
 87c:	28 0f       	add	r18, r24
 87e:	2a 30       	cpi	r18, 0x0A	; 10
 880:	40 f0       	brcs	.+16     	; 0x892 <vfprintf+0xb4>
 882:	8e 32       	cpi	r24, 0x2E	; 46
 884:	b9 f4       	brne	.+46     	; 0x8b4 <vfprintf+0xd6>
 886:	36 fc       	sbrc	r3, 6
 888:	81 c1       	rjmp	.+770    	; 0xb8c <__stack+0x28d>
 88a:	23 2d       	mov	r18, r3
 88c:	20 64       	ori	r18, 0x40	; 64
 88e:	32 2e       	mov	r3, r18
 890:	19 c0       	rjmp	.+50     	; 0x8c4 <vfprintf+0xe6>
 892:	36 fe       	sbrs	r3, 6
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0xc4>
 896:	8a e0       	ldi	r24, 0x0A	; 10
 898:	98 9e       	mul	r9, r24
 89a:	20 0d       	add	r18, r0
 89c:	11 24       	eor	r1, r1
 89e:	92 2e       	mov	r9, r18
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <vfprintf+0xe6>
 8a2:	ea e0       	ldi	r30, 0x0A	; 10
 8a4:	2e 9e       	mul	r2, r30
 8a6:	20 0d       	add	r18, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	22 2e       	mov	r2, r18
 8ac:	f3 2d       	mov	r31, r3
 8ae:	f0 62       	ori	r31, 0x20	; 32
 8b0:	3f 2e       	mov	r3, r31
 8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <vfprintf+0xe6>
 8b4:	8c 36       	cpi	r24, 0x6C	; 108
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <vfprintf+0xe2>
 8b8:	83 2d       	mov	r24, r3
 8ba:	80 68       	ori	r24, 0x80	; 128
 8bc:	38 2e       	mov	r3, r24
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <vfprintf+0xe6>
 8c0:	88 36       	cpi	r24, 0x68	; 104
 8c2:	41 f4       	brne	.+16     	; 0x8d4 <vfprintf+0xf6>
 8c4:	f7 01       	movw	r30, r14
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	7f 01       	movw	r14, r30
 8d0:	81 11       	cpse	r24, r1
 8d2:	b3 cf       	rjmp	.-154    	; 0x83a <vfprintf+0x5c>
 8d4:	98 2f       	mov	r25, r24
 8d6:	9f 7d       	andi	r25, 0xDF	; 223
 8d8:	95 54       	subi	r25, 0x45	; 69
 8da:	93 30       	cpi	r25, 0x03	; 3
 8dc:	28 f4       	brcc	.+10     	; 0x8e8 <vfprintf+0x10a>
 8de:	0c 5f       	subi	r16, 0xFC	; 252
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	9f e3       	ldi	r25, 0x3F	; 63
 8e4:	99 83       	std	Y+1, r25	; 0x01
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <__stack+0x3>
 8e8:	83 36       	cpi	r24, 0x63	; 99
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <vfprintf+0x11a>
 8ec:	83 37       	cpi	r24, 0x73	; 115
 8ee:	71 f0       	breq	.+28     	; 0x90c <__stack+0xd>
 8f0:	83 35       	cpi	r24, 0x53	; 83
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <vfprintf+0x118>
 8f4:	59 c0       	rjmp	.+178    	; 0x9a8 <__stack+0xa9>
 8f6:	21 c0       	rjmp	.+66     	; 0x93a <__stack+0x3b>
 8f8:	f8 01       	movw	r30, r16
 8fa:	80 81       	ld	r24, Z
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	0e 5f       	subi	r16, 0xFE	; 254
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	88 24       	eor	r8, r8
 904:	83 94       	inc	r8
 906:	91 2c       	mov	r9, r1
 908:	53 01       	movw	r10, r6
 90a:	13 c0       	rjmp	.+38     	; 0x932 <__stack+0x33>
 90c:	28 01       	movw	r4, r16
 90e:	f2 e0       	ldi	r31, 0x02	; 2
 910:	4f 0e       	add	r4, r31
 912:	51 1c       	adc	r5, r1
 914:	f8 01       	movw	r30, r16
 916:	a0 80       	ld	r10, Z
 918:	b1 80       	ldd	r11, Z+1	; 0x01
 91a:	36 fe       	sbrs	r3, 6
 91c:	03 c0       	rjmp	.+6      	; 0x924 <__stack+0x25>
 91e:	69 2d       	mov	r22, r9
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
 924:	6f ef       	ldi	r22, 0xFF	; 255
 926:	7f ef       	ldi	r23, 0xFF	; 255
 928:	c5 01       	movw	r24, r10
 92a:	0e 94 de 05 	call	0xbbc	; 0xbbc <strnlen>
 92e:	4c 01       	movw	r8, r24
 930:	82 01       	movw	r16, r4
 932:	f3 2d       	mov	r31, r3
 934:	ff 77       	andi	r31, 0x7F	; 127
 936:	3f 2e       	mov	r3, r31
 938:	16 c0       	rjmp	.+44     	; 0x966 <__stack+0x67>
 93a:	28 01       	movw	r4, r16
 93c:	22 e0       	ldi	r18, 0x02	; 2
 93e:	42 0e       	add	r4, r18
 940:	51 1c       	adc	r5, r1
 942:	f8 01       	movw	r30, r16
 944:	a0 80       	ld	r10, Z
 946:	b1 80       	ldd	r11, Z+1	; 0x01
 948:	36 fe       	sbrs	r3, 6
 94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
 94c:	69 2d       	mov	r22, r9
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	6f ef       	ldi	r22, 0xFF	; 255
 954:	7f ef       	ldi	r23, 0xFF	; 255
 956:	c5 01       	movw	r24, r10
 958:	0e 94 d3 05 	call	0xba6	; 0xba6 <strnlen_P>
 95c:	4c 01       	movw	r8, r24
 95e:	f3 2d       	mov	r31, r3
 960:	f0 68       	ori	r31, 0x80	; 128
 962:	3f 2e       	mov	r3, r31
 964:	82 01       	movw	r16, r4
 966:	33 fc       	sbrc	r3, 3
 968:	1b c0       	rjmp	.+54     	; 0x9a0 <__stack+0xa1>
 96a:	82 2d       	mov	r24, r2
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	88 16       	cp	r8, r24
 970:	99 06       	cpc	r9, r25
 972:	b0 f4       	brcc	.+44     	; 0x9a0 <__stack+0xa1>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 97e:	2a 94       	dec	r2
 980:	f4 cf       	rjmp	.-24     	; 0x96a <__stack+0x6b>
 982:	f5 01       	movw	r30, r10
 984:	37 fc       	sbrc	r3, 7
 986:	85 91       	lpm	r24, Z+
 988:	37 fe       	sbrs	r3, 7
 98a:	81 91       	ld	r24, Z+
 98c:	5f 01       	movw	r10, r30
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 996:	21 10       	cpse	r2, r1
 998:	2a 94       	dec	r2
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	82 1a       	sub	r8, r18
 99e:	91 08       	sbc	r9, r1
 9a0:	81 14       	cp	r8, r1
 9a2:	91 04       	cpc	r9, r1
 9a4:	71 f7       	brne	.-36     	; 0x982 <__stack+0x83>
 9a6:	e8 c0       	rjmp	.+464    	; 0xb78 <__stack+0x279>
 9a8:	84 36       	cpi	r24, 0x64	; 100
 9aa:	11 f0       	breq	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	89 36       	cpi	r24, 0x69	; 105
 9ae:	41 f5       	brne	.+80     	; 0xa00 <__stack+0x101>
 9b0:	f8 01       	movw	r30, r16
 9b2:	37 fe       	sbrs	r3, 7
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <__stack+0xc5>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	82 81       	ldd	r24, Z+2	; 0x02
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <__stack+0xd5>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	07 2e       	mov	r0, r23
 9ca:	00 0c       	add	r0, r0
 9cc:	88 0b       	sbc	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	f3 2d       	mov	r31, r3
 9d6:	ff 76       	andi	r31, 0x6F	; 111
 9d8:	3f 2e       	mov	r3, r31
 9da:	97 ff       	sbrs	r25, 7
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__stack+0xf1>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	f0 68       	ori	r31, 0x80	; 128
 9ee:	3f 2e       	mov	r3, r31
 9f0:	2a e0       	ldi	r18, 0x0A	; 10
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	a3 01       	movw	r20, r6
 9f6:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 9fa:	88 2e       	mov	r8, r24
 9fc:	86 18       	sub	r8, r6
 9fe:	45 c0       	rjmp	.+138    	; 0xa8a <__stack+0x18b>
 a00:	85 37       	cpi	r24, 0x75	; 117
 a02:	31 f4       	brne	.+12     	; 0xa10 <__stack+0x111>
 a04:	23 2d       	mov	r18, r3
 a06:	2f 7e       	andi	r18, 0xEF	; 239
 a08:	b2 2e       	mov	r11, r18
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	25 c0       	rjmp	.+74     	; 0xa5a <__stack+0x15b>
 a10:	93 2d       	mov	r25, r3
 a12:	99 7f       	andi	r25, 0xF9	; 249
 a14:	b9 2e       	mov	r11, r25
 a16:	8f 36       	cpi	r24, 0x6F	; 111
 a18:	c1 f0       	breq	.+48     	; 0xa4a <__stack+0x14b>
 a1a:	18 f4       	brcc	.+6      	; 0xa22 <__stack+0x123>
 a1c:	88 35       	cpi	r24, 0x58	; 88
 a1e:	79 f0       	breq	.+30     	; 0xa3e <__stack+0x13f>
 a20:	b5 c0       	rjmp	.+362    	; 0xb8c <__stack+0x28d>
 a22:	80 37       	cpi	r24, 0x70	; 112
 a24:	19 f0       	breq	.+6      	; 0xa2c <__stack+0x12d>
 a26:	88 37       	cpi	r24, 0x78	; 120
 a28:	21 f0       	breq	.+8      	; 0xa32 <__stack+0x133>
 a2a:	b0 c0       	rjmp	.+352    	; 0xb8c <__stack+0x28d>
 a2c:	e9 2f       	mov	r30, r25
 a2e:	e0 61       	ori	r30, 0x10	; 16
 a30:	be 2e       	mov	r11, r30
 a32:	b4 fe       	sbrs	r11, 4
 a34:	0d c0       	rjmp	.+26     	; 0xa50 <__stack+0x151>
 a36:	fb 2d       	mov	r31, r11
 a38:	f4 60       	ori	r31, 0x04	; 4
 a3a:	bf 2e       	mov	r11, r31
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__stack+0x151>
 a3e:	34 fe       	sbrs	r3, 4
 a40:	0a c0       	rjmp	.+20     	; 0xa56 <__stack+0x157>
 a42:	29 2f       	mov	r18, r25
 a44:	26 60       	ori	r18, 0x06	; 6
 a46:	b2 2e       	mov	r11, r18
 a48:	06 c0       	rjmp	.+12     	; 0xa56 <__stack+0x157>
 a4a:	28 e0       	ldi	r18, 0x08	; 8
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__stack+0x15b>
 a50:	20 e1       	ldi	r18, 0x10	; 16
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__stack+0x15b>
 a56:	20 e1       	ldi	r18, 0x10	; 16
 a58:	32 e0       	ldi	r19, 0x02	; 2
 a5a:	f8 01       	movw	r30, r16
 a5c:	b7 fe       	sbrs	r11, 7
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__stack+0x16f>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	0c 5f       	subi	r16, 0xFC	; 252
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <__stack+0x17b>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 5f       	subi	r16, 0xFE	; 254
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	a3 01       	movw	r20, r6
 a7c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 a80:	88 2e       	mov	r8, r24
 a82:	86 18       	sub	r8, r6
 a84:	fb 2d       	mov	r31, r11
 a86:	ff 77       	andi	r31, 0x7F	; 127
 a88:	3f 2e       	mov	r3, r31
 a8a:	36 fe       	sbrs	r3, 6
 a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__stack+0x1a9>
 a8e:	23 2d       	mov	r18, r3
 a90:	2e 7f       	andi	r18, 0xFE	; 254
 a92:	a2 2e       	mov	r10, r18
 a94:	89 14       	cp	r8, r9
 a96:	58 f4       	brcc	.+22     	; 0xaae <__stack+0x1af>
 a98:	34 fe       	sbrs	r3, 4
 a9a:	0b c0       	rjmp	.+22     	; 0xab2 <__stack+0x1b3>
 a9c:	32 fc       	sbrc	r3, 2
 a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__stack+0x1b3>
 aa0:	83 2d       	mov	r24, r3
 aa2:	8e 7e       	andi	r24, 0xEE	; 238
 aa4:	a8 2e       	mov	r10, r24
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__stack+0x1b3>
 aa8:	b8 2c       	mov	r11, r8
 aaa:	a3 2c       	mov	r10, r3
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	b8 2c       	mov	r11, r8
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__stack+0x1b5>
 ab2:	b9 2c       	mov	r11, r9
 ab4:	a4 fe       	sbrs	r10, 4
 ab6:	0f c0       	rjmp	.+30     	; 0xad6 <__stack+0x1d7>
 ab8:	fe 01       	movw	r30, r28
 aba:	e8 0d       	add	r30, r8
 abc:	f1 1d       	adc	r31, r1
 abe:	80 81       	ld	r24, Z
 ac0:	80 33       	cpi	r24, 0x30	; 48
 ac2:	21 f4       	brne	.+8      	; 0xacc <__stack+0x1cd>
 ac4:	9a 2d       	mov	r25, r10
 ac6:	99 7e       	andi	r25, 0xE9	; 233
 ac8:	a9 2e       	mov	r10, r25
 aca:	09 c0       	rjmp	.+18     	; 0xade <__stack+0x1df>
 acc:	a2 fe       	sbrs	r10, 2
 ace:	06 c0       	rjmp	.+12     	; 0xadc <__stack+0x1dd>
 ad0:	b3 94       	inc	r11
 ad2:	b3 94       	inc	r11
 ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x1df>
 ad6:	8a 2d       	mov	r24, r10
 ad8:	86 78       	andi	r24, 0x86	; 134
 ada:	09 f0       	breq	.+2      	; 0xade <__stack+0x1df>
 adc:	b3 94       	inc	r11
 ade:	a3 fc       	sbrc	r10, 3
 ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__stack+0x205>
 ae2:	a0 fe       	sbrs	r10, 0
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <__stack+0x1f3>
 ae6:	b2 14       	cp	r11, r2
 ae8:	88 f4       	brcc	.+34     	; 0xb0c <__stack+0x20d>
 aea:	28 0c       	add	r2, r8
 aec:	92 2c       	mov	r9, r2
 aee:	9b 18       	sub	r9, r11
 af0:	0e c0       	rjmp	.+28     	; 0xb0e <__stack+0x20f>
 af2:	b2 14       	cp	r11, r2
 af4:	60 f4       	brcc	.+24     	; 0xb0e <__stack+0x20f>
 af6:	b6 01       	movw	r22, r12
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b00:	b3 94       	inc	r11
 b02:	f7 cf       	rjmp	.-18     	; 0xaf2 <__stack+0x1f3>
 b04:	b2 14       	cp	r11, r2
 b06:	18 f4       	brcc	.+6      	; 0xb0e <__stack+0x20f>
 b08:	2b 18       	sub	r2, r11
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x211>
 b0c:	98 2c       	mov	r9, r8
 b0e:	21 2c       	mov	r2, r1
 b10:	a4 fe       	sbrs	r10, 4
 b12:	10 c0       	rjmp	.+32     	; 0xb34 <__stack+0x235>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e3       	ldi	r24, 0x30	; 48
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b1e:	a2 fe       	sbrs	r10, 2
 b20:	17 c0       	rjmp	.+46     	; 0xb50 <__stack+0x251>
 b22:	a1 fc       	sbrc	r10, 1
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x22d>
 b26:	88 e7       	ldi	r24, 0x78	; 120
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x231>
 b2c:	88 e5       	ldi	r24, 0x58	; 88
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	b6 01       	movw	r22, r12
 b32:	0c c0       	rjmp	.+24     	; 0xb4c <__stack+0x24d>
 b34:	8a 2d       	mov	r24, r10
 b36:	86 78       	andi	r24, 0x86	; 134
 b38:	59 f0       	breq	.+22     	; 0xb50 <__stack+0x251>
 b3a:	a1 fe       	sbrs	r10, 1
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <__stack+0x243>
 b3e:	8b e2       	ldi	r24, 0x2B	; 43
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <__stack+0x245>
 b42:	80 e2       	ldi	r24, 0x20	; 32
 b44:	a7 fc       	sbrc	r10, 7
 b46:	8d e2       	ldi	r24, 0x2D	; 45
 b48:	b6 01       	movw	r22, r12
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b50:	89 14       	cp	r8, r9
 b52:	38 f4       	brcc	.+14     	; 0xb62 <__stack+0x263>
 b54:	b6 01       	movw	r22, r12
 b56:	80 e3       	ldi	r24, 0x30	; 48
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b5e:	9a 94       	dec	r9
 b60:	f7 cf       	rjmp	.-18     	; 0xb50 <__stack+0x251>
 b62:	8a 94       	dec	r8
 b64:	f3 01       	movw	r30, r6
 b66:	e8 0d       	add	r30, r8
 b68:	f1 1d       	adc	r31, r1
 b6a:	80 81       	ld	r24, Z
 b6c:	b6 01       	movw	r22, r12
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b74:	81 10       	cpse	r8, r1
 b76:	f5 cf       	rjmp	.-22     	; 0xb62 <__stack+0x263>
 b78:	22 20       	and	r2, r2
 b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x27f>
 b7c:	42 ce       	rjmp	.-892    	; 0x802 <vfprintf+0x24>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fputc>
 b88:	2a 94       	dec	r2
 b8a:	f6 cf       	rjmp	.-20     	; 0xb78 <__stack+0x279>
 b8c:	f6 01       	movw	r30, r12
 b8e:	86 81       	ldd	r24, Z+6	; 0x06
 b90:	97 81       	ldd	r25, Z+7	; 0x07
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x299>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	2b 96       	adiw	r28, 0x0b	; 11
 b9a:	e2 e1       	ldi	r30, 0x12	; 18
 b9c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__epilogue_restores__>

00000ba0 <__ctype_isfalse>:
 ba0:	99 27       	eor	r25, r25
 ba2:	88 27       	eor	r24, r24

00000ba4 <__ctype_istrue>:
 ba4:	08 95       	ret

00000ba6 <strnlen_P>:
 ba6:	fc 01       	movw	r30, r24
 ba8:	05 90       	lpm	r0, Z+
 baa:	61 50       	subi	r22, 0x01	; 1
 bac:	70 40       	sbci	r23, 0x00	; 0
 bae:	01 10       	cpse	r0, r1
 bb0:	d8 f7       	brcc	.-10     	; 0xba8 <strnlen_P+0x2>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	8e 0f       	add	r24, r30
 bb8:	9f 1f       	adc	r25, r31
 bba:	08 95       	ret

00000bbc <strnlen>:
 bbc:	fc 01       	movw	r30, r24
 bbe:	61 50       	subi	r22, 0x01	; 1
 bc0:	70 40       	sbci	r23, 0x00	; 0
 bc2:	01 90       	ld	r0, Z+
 bc4:	01 10       	cpse	r0, r1
 bc6:	d8 f7       	brcc	.-10     	; 0xbbe <strnlen+0x2>
 bc8:	80 95       	com	r24
 bca:	90 95       	com	r25
 bcc:	8e 0f       	add	r24, r30
 bce:	9f 1f       	adc	r25, r31
 bd0:	08 95       	ret

00000bd2 <fputc>:
 bd2:	0f 93       	push	r16
 bd4:	1f 93       	push	r17
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	fb 01       	movw	r30, r22
 bdc:	23 81       	ldd	r18, Z+3	; 0x03
 bde:	21 fd       	sbrc	r18, 1
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <fputc+0x16>
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	9f ef       	ldi	r25, 0xFF	; 255
 be6:	2c c0       	rjmp	.+88     	; 0xc40 <fputc+0x6e>
 be8:	22 ff       	sbrs	r18, 2
 bea:	16 c0       	rjmp	.+44     	; 0xc18 <fputc+0x46>
 bec:	46 81       	ldd	r20, Z+6	; 0x06
 bee:	57 81       	ldd	r21, Z+7	; 0x07
 bf0:	24 81       	ldd	r18, Z+4	; 0x04
 bf2:	35 81       	ldd	r19, Z+5	; 0x05
 bf4:	42 17       	cp	r20, r18
 bf6:	53 07       	cpc	r21, r19
 bf8:	44 f4       	brge	.+16     	; 0xc0a <fputc+0x38>
 bfa:	a0 81       	ld	r26, Z
 bfc:	b1 81       	ldd	r27, Z+1	; 0x01
 bfe:	9d 01       	movw	r18, r26
 c00:	2f 5f       	subi	r18, 0xFF	; 255
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	31 83       	std	Z+1, r19	; 0x01
 c06:	20 83       	st	Z, r18
 c08:	8c 93       	st	X, r24
 c0a:	26 81       	ldd	r18, Z+6	; 0x06
 c0c:	37 81       	ldd	r19, Z+7	; 0x07
 c0e:	2f 5f       	subi	r18, 0xFF	; 255
 c10:	3f 4f       	sbci	r19, 0xFF	; 255
 c12:	37 83       	std	Z+7, r19	; 0x07
 c14:	26 83       	std	Z+6, r18	; 0x06
 c16:	14 c0       	rjmp	.+40     	; 0xc40 <fputc+0x6e>
 c18:	8b 01       	movw	r16, r22
 c1a:	ec 01       	movw	r28, r24
 c1c:	fb 01       	movw	r30, r22
 c1e:	00 84       	ldd	r0, Z+8	; 0x08
 c20:	f1 85       	ldd	r31, Z+9	; 0x09
 c22:	e0 2d       	mov	r30, r0
 c24:	09 95       	icall
 c26:	89 2b       	or	r24, r25
 c28:	e1 f6       	brne	.-72     	; 0xbe2 <fputc+0x10>
 c2a:	d8 01       	movw	r26, r16
 c2c:	16 96       	adiw	r26, 0x06	; 6
 c2e:	8d 91       	ld	r24, X+
 c30:	9c 91       	ld	r25, X
 c32:	17 97       	sbiw	r26, 0x07	; 7
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	17 96       	adiw	r26, 0x07	; 7
 c38:	9c 93       	st	X, r25
 c3a:	8e 93       	st	-X, r24
 c3c:	16 97       	sbiw	r26, 0x06	; 6
 c3e:	ce 01       	movw	r24, r28
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	1f 91       	pop	r17
 c46:	0f 91       	pop	r16
 c48:	08 95       	ret

00000c4a <__ultoa_invert>:
 c4a:	fa 01       	movw	r30, r20
 c4c:	aa 27       	eor	r26, r26
 c4e:	28 30       	cpi	r18, 0x08	; 8
 c50:	51 f1       	breq	.+84     	; 0xca6 <__ultoa_invert+0x5c>
 c52:	20 31       	cpi	r18, 0x10	; 16
 c54:	81 f1       	breq	.+96     	; 0xcb6 <__ultoa_invert+0x6c>
 c56:	e8 94       	clt
 c58:	6f 93       	push	r22
 c5a:	6e 7f       	andi	r22, 0xFE	; 254
 c5c:	6e 5f       	subi	r22, 0xFE	; 254
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	af 4f       	sbci	r26, 0xFF	; 255
 c66:	b1 e0       	ldi	r27, 0x01	; 1
 c68:	3e d0       	rcall	.+124    	; 0xce6 <__ultoa_invert+0x9c>
 c6a:	b4 e0       	ldi	r27, 0x04	; 4
 c6c:	3c d0       	rcall	.+120    	; 0xce6 <__ultoa_invert+0x9c>
 c6e:	67 0f       	add	r22, r23
 c70:	78 1f       	adc	r23, r24
 c72:	89 1f       	adc	r24, r25
 c74:	9a 1f       	adc	r25, r26
 c76:	a1 1d       	adc	r26, r1
 c78:	68 0f       	add	r22, r24
 c7a:	79 1f       	adc	r23, r25
 c7c:	8a 1f       	adc	r24, r26
 c7e:	91 1d       	adc	r25, r1
 c80:	a1 1d       	adc	r26, r1
 c82:	6a 0f       	add	r22, r26
 c84:	71 1d       	adc	r23, r1
 c86:	81 1d       	adc	r24, r1
 c88:	91 1d       	adc	r25, r1
 c8a:	a1 1d       	adc	r26, r1
 c8c:	20 d0       	rcall	.+64     	; 0xcce <__ultoa_invert+0x84>
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__ultoa_invert+0x48>
 c90:	68 94       	set
 c92:	3f 91       	pop	r19
 c94:	2a e0       	ldi	r18, 0x0A	; 10
 c96:	26 9f       	mul	r18, r22
 c98:	11 24       	eor	r1, r1
 c9a:	30 19       	sub	r19, r0
 c9c:	30 5d       	subi	r19, 0xD0	; 208
 c9e:	31 93       	st	Z+, r19
 ca0:	de f6       	brtc	.-74     	; 0xc58 <__ultoa_invert+0xe>
 ca2:	cf 01       	movw	r24, r30
 ca4:	08 95       	ret
 ca6:	46 2f       	mov	r20, r22
 ca8:	47 70       	andi	r20, 0x07	; 7
 caa:	40 5d       	subi	r20, 0xD0	; 208
 cac:	41 93       	st	Z+, r20
 cae:	b3 e0       	ldi	r27, 0x03	; 3
 cb0:	0f d0       	rcall	.+30     	; 0xcd0 <__ultoa_invert+0x86>
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__ultoa_invert+0x5c>
 cb4:	f6 cf       	rjmp	.-20     	; 0xca2 <__ultoa_invert+0x58>
 cb6:	46 2f       	mov	r20, r22
 cb8:	4f 70       	andi	r20, 0x0F	; 15
 cba:	40 5d       	subi	r20, 0xD0	; 208
 cbc:	4a 33       	cpi	r20, 0x3A	; 58
 cbe:	18 f0       	brcs	.+6      	; 0xcc6 <__ultoa_invert+0x7c>
 cc0:	49 5d       	subi	r20, 0xD9	; 217
 cc2:	31 fd       	sbrc	r19, 1
 cc4:	40 52       	subi	r20, 0x20	; 32
 cc6:	41 93       	st	Z+, r20
 cc8:	02 d0       	rcall	.+4      	; 0xcce <__ultoa_invert+0x84>
 cca:	a9 f7       	brne	.-22     	; 0xcb6 <__ultoa_invert+0x6c>
 ccc:	ea cf       	rjmp	.-44     	; 0xca2 <__ultoa_invert+0x58>
 cce:	b4 e0       	ldi	r27, 0x04	; 4
 cd0:	a6 95       	lsr	r26
 cd2:	97 95       	ror	r25
 cd4:	87 95       	ror	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	ba 95       	dec	r27
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__ultoa_invert+0x86>
 cde:	00 97       	sbiw	r24, 0x00	; 0
 ce0:	61 05       	cpc	r22, r1
 ce2:	71 05       	cpc	r23, r1
 ce4:	08 95       	ret
 ce6:	9b 01       	movw	r18, r22
 ce8:	ac 01       	movw	r20, r24
 cea:	0a 2e       	mov	r0, r26
 cec:	06 94       	lsr	r0
 cee:	57 95       	ror	r21
 cf0:	47 95       	ror	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0xa2>
 cfa:	62 0f       	add	r22, r18
 cfc:	73 1f       	adc	r23, r19
 cfe:	84 1f       	adc	r24, r20
 d00:	95 1f       	adc	r25, r21
 d02:	a0 1d       	adc	r26, r0
 d04:	08 95       	ret

00000d06 <__mulsi3>:
 d06:	db 01       	movw	r26, r22
 d08:	8f 93       	push	r24
 d0a:	9f 93       	push	r25
 d0c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__muluhisi3>
 d10:	bf 91       	pop	r27
 d12:	af 91       	pop	r26
 d14:	a2 9f       	mul	r26, r18
 d16:	80 0d       	add	r24, r0
 d18:	91 1d       	adc	r25, r1
 d1a:	a3 9f       	mul	r26, r19
 d1c:	90 0d       	add	r25, r0
 d1e:	b2 9f       	mul	r27, r18
 d20:	90 0d       	add	r25, r0
 d22:	11 24       	eor	r1, r1
 d24:	08 95       	ret

00000d26 <__udivmodsi4>:
 d26:	a1 e2       	ldi	r26, 0x21	; 33
 d28:	1a 2e       	mov	r1, r26
 d2a:	aa 1b       	sub	r26, r26
 d2c:	bb 1b       	sub	r27, r27
 d2e:	fd 01       	movw	r30, r26
 d30:	0d c0       	rjmp	.+26     	; 0xd4c <__udivmodsi4_ep>

00000d32 <__udivmodsi4_loop>:
 d32:	aa 1f       	adc	r26, r26
 d34:	bb 1f       	adc	r27, r27
 d36:	ee 1f       	adc	r30, r30
 d38:	ff 1f       	adc	r31, r31
 d3a:	a2 17       	cp	r26, r18
 d3c:	b3 07       	cpc	r27, r19
 d3e:	e4 07       	cpc	r30, r20
 d40:	f5 07       	cpc	r31, r21
 d42:	20 f0       	brcs	.+8      	; 0xd4c <__udivmodsi4_ep>
 d44:	a2 1b       	sub	r26, r18
 d46:	b3 0b       	sbc	r27, r19
 d48:	e4 0b       	sbc	r30, r20
 d4a:	f5 0b       	sbc	r31, r21

00000d4c <__udivmodsi4_ep>:
 d4c:	66 1f       	adc	r22, r22
 d4e:	77 1f       	adc	r23, r23
 d50:	88 1f       	adc	r24, r24
 d52:	99 1f       	adc	r25, r25
 d54:	1a 94       	dec	r1
 d56:	69 f7       	brne	.-38     	; 0xd32 <__udivmodsi4_loop>
 d58:	60 95       	com	r22
 d5a:	70 95       	com	r23
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	9b 01       	movw	r18, r22
 d62:	ac 01       	movw	r20, r24
 d64:	bd 01       	movw	r22, r26
 d66:	cf 01       	movw	r24, r30
 d68:	08 95       	ret

00000d6a <__muluhisi3>:
 d6a:	0e 94 f7 06 	call	0xdee	; 0xdee <__umulhisi3>
 d6e:	a5 9f       	mul	r26, r21
 d70:	90 0d       	add	r25, r0
 d72:	b4 9f       	mul	r27, r20
 d74:	90 0d       	add	r25, r0
 d76:	a4 9f       	mul	r26, r20
 d78:	80 0d       	add	r24, r0
 d7a:	91 1d       	adc	r25, r1
 d7c:	11 24       	eor	r1, r1
 d7e:	08 95       	ret

00000d80 <__prologue_saves__>:
 d80:	2f 92       	push	r2
 d82:	3f 92       	push	r3
 d84:	4f 92       	push	r4
 d86:	5f 92       	push	r5
 d88:	6f 92       	push	r6
 d8a:	7f 92       	push	r7
 d8c:	8f 92       	push	r8
 d8e:	9f 92       	push	r9
 d90:	af 92       	push	r10
 d92:	bf 92       	push	r11
 d94:	cf 92       	push	r12
 d96:	df 92       	push	r13
 d98:	ef 92       	push	r14
 d9a:	ff 92       	push	r15
 d9c:	0f 93       	push	r16
 d9e:	1f 93       	push	r17
 da0:	cf 93       	push	r28
 da2:	df 93       	push	r29
 da4:	cd b7       	in	r28, 0x3d	; 61
 da6:	de b7       	in	r29, 0x3e	; 62
 da8:	ca 1b       	sub	r28, r26
 daa:	db 0b       	sbc	r29, r27
 dac:	0f b6       	in	r0, 0x3f	; 63
 dae:	f8 94       	cli
 db0:	de bf       	out	0x3e, r29	; 62
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	cd bf       	out	0x3d, r28	; 61
 db6:	09 94       	ijmp

00000db8 <__epilogue_restores__>:
 db8:	2a 88       	ldd	r2, Y+18	; 0x12
 dba:	39 88       	ldd	r3, Y+17	; 0x11
 dbc:	48 88       	ldd	r4, Y+16	; 0x10
 dbe:	5f 84       	ldd	r5, Y+15	; 0x0f
 dc0:	6e 84       	ldd	r6, Y+14	; 0x0e
 dc2:	7d 84       	ldd	r7, Y+13	; 0x0d
 dc4:	8c 84       	ldd	r8, Y+12	; 0x0c
 dc6:	9b 84       	ldd	r9, Y+11	; 0x0b
 dc8:	aa 84       	ldd	r10, Y+10	; 0x0a
 dca:	b9 84       	ldd	r11, Y+9	; 0x09
 dcc:	c8 84       	ldd	r12, Y+8	; 0x08
 dce:	df 80       	ldd	r13, Y+7	; 0x07
 dd0:	ee 80       	ldd	r14, Y+6	; 0x06
 dd2:	fd 80       	ldd	r15, Y+5	; 0x05
 dd4:	0c 81       	ldd	r16, Y+4	; 0x04
 dd6:	1b 81       	ldd	r17, Y+3	; 0x03
 dd8:	aa 81       	ldd	r26, Y+2	; 0x02
 dda:	b9 81       	ldd	r27, Y+1	; 0x01
 ddc:	ce 0f       	add	r28, r30
 dde:	d1 1d       	adc	r29, r1
 de0:	0f b6       	in	r0, 0x3f	; 63
 de2:	f8 94       	cli
 de4:	de bf       	out	0x3e, r29	; 62
 de6:	0f be       	out	0x3f, r0	; 63
 de8:	cd bf       	out	0x3d, r28	; 61
 dea:	ed 01       	movw	r28, r26
 dec:	08 95       	ret

00000dee <__umulhisi3>:
 dee:	a2 9f       	mul	r26, r18
 df0:	b0 01       	movw	r22, r0
 df2:	b3 9f       	mul	r27, r19
 df4:	c0 01       	movw	r24, r0
 df6:	a3 9f       	mul	r26, r19
 df8:	70 0d       	add	r23, r0
 dfa:	81 1d       	adc	r24, r1
 dfc:	11 24       	eor	r1, r1
 dfe:	91 1d       	adc	r25, r1
 e00:	b2 9f       	mul	r27, r18
 e02:	70 0d       	add	r23, r0
 e04:	81 1d       	adc	r24, r1
 e06:	11 24       	eor	r1, r1
 e08:	91 1d       	adc	r25, r1
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
